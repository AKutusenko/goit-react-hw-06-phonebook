{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.jsx","redux/action-types.jsx","components/ContactList/ContactList.jsx","components/Form/Form.jsx","redux/filter/filter-actions.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.jsx","redux/filter/filter-reducer.jsx","redux/store.jsx","index.js","components/Form/Form.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","removeContact","ContactList","contacts","useSelector","state","filter","dispatch","useDispatch","visibleContacts","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","className","s","list","map","listItem","btn","type","onClick","Form","useState","setName","setNumber","handleChange","e","currentTarget","value","form","onSubmit","preventDefault","label","placeholder","pattern","title","required","onChange","input","Filter","App","contactsReducer","createReducer","find","alert","filterReducer","action","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0b3ab1c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__2pzbD\",\"listItem\":\"ContactList_listItem__tSHaY\",\"list\":\"ContactList_list__3cLkq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__36Te_\",\"input\":\"Filter_input__Wb69p\"};","import { ADD_CONTACT, REMOVE_CONTACT } from \"../action-types\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from \"shortid\";\r\n\r\n// export const addContact = (name, number) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: { name, number, id: shortid.generate() },\r\n// });\r\n// export const removeContact = (id) => ({\r\n//   type: REMOVE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\nexport const addContact = createAction(ADD_CONTACT, (name, number) => ({\r\n  payload: { name, number, id: shortid.generate() },\r\n}));\r\n\r\nexport const removeContact = createAction(REMOVE_CONTACT);\r\n","export const ADD_CONTACT = \"App/addContact\";\r\nexport const REMOVE_CONTACT = \"App/removeContact\";\r\nexport const FILTER = \"App/filter\";\r\n","import { useSelector, useDispatch } from \"react-redux\";\nimport s from \"./ContactList.module.css\";\nimport { removeContact } from \"../../redux/contacts/contacts-actions\";\n\nexport default function ContactList() {\n  const contacts = useSelector((state) => state.contacts);\n  const filter = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  function getVisibleContacts() {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <ul className={s.list}>\n      {visibleContacts &&\n        visibleContacts.map(({ name, number, id }) => (\n          <li className={s.listItem} key={id}>\n            {`${name}: ${number}`}\n            <button\n              className={s.btn}\n              type=\"button\"\n              // onClick={() => onRemoveContact(id)}\n              onClick={() => dispatch(removeContact(id))}\n            >\n              Remove\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\n// const mapStateToProps = (state) => ({\n//   contacts: state.contacts,\n//   filter: state.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRemoveContact: (id) => dispatch(removeContact(id)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { useState } from \"react\";\nimport s from \"./Form.module.css\";\nimport { addContact } from \"../../redux/contacts/contacts-actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function Form() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(addContact(name, number));\n    setNumber(\"\");\n    setName(\"\");\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Homer Simpson\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          value={name}\n          className={s.input}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+38(0XX)-XXX-XX-XX\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          value={number}\n          className={s.input}\n        />\n      </label>\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const mapStateToProps = (state) => {\n//   return { contacts: state.contacts };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     addContact: (name, number) => dispatch(addContact(name, number)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import { FILTER } from \"../action-types\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// export const filter = (text) => ({\r\n//   type: FILTER,\r\n//   payload: text,\r\n// });\r\n\r\nexport const filter = createAction(FILTER);\r\n","import { useSelector, useDispatch } from \"react-redux\";\nimport s from \"./Filter.module.css\";\nimport { filter } from \"../../redux/filter/filter-actions\";\n\nexport default function Filter() {\n  const value = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Filter\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter some letters to search\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        value={value}\n        onChange={(e) => dispatch(filter(e.currentTarget.value))}\n      ></input>\n    </label>\n  );\n}\n\n// const mapStateToProps = (state) => ({\n//   value: state.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (e) => dispatch(filter(e.currentTarget.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactList from \"./components/ContactList/ContactList\";\nimport Form from \"./components/Form/Form\";\nimport Filter from \"./components/Filter/Filter\";\nimport s from \"./App.module.css\";\n\nexport default function App() {\n  // useEffect(() => {\n  //   const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n  //   if (contacts) {\n  //     setContacts(contacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n  //   if (contacts) {\n  //     store.setState(contacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"contacts\", JSON.stringify(store.getState().contacts));\n  // }, [contacts]);\n\n  return (\n    <>\n      <h1 className={s}>Phonebook</h1>\n      <Form />\n      <h2 className={s}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, removeContact } from \"./contacts-actions\";\r\n// import { ADD_CONTACT, REMOVE_CONTACT } from \"../action-types\";\r\n\r\n// export const contactsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD_CONTACT:\r\n//       let duplicate = state.find((contact) => contact.name === payload.name);\r\n//       if (duplicate) {\r\n//         alert(\"Такой контакт уже существует!\");\r\n//         return state;\r\n//       } else {\r\n//         return [...state, payload];\r\n//       }\r\n//     case REMOVE_CONTACT:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport const contactsReducer = createReducer([], {\r\n  [addContact]: (state, { payload }) => {\r\n    let duplicate = state.find((contact) => contact.name === payload.name);\r\n    if (duplicate) {\r\n      alert(\"Такой контакт уже существует!\");\r\n      return state;\r\n    } else {\r\n      return [...state, payload];\r\n    }\r\n  },\r\n  [removeContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n","import { filter } from \"../filter/filter-actions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import { FILTER } from \"../action-types\";\r\n\r\n// export const filterReducer = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport const filterReducer = createReducer(\"\", {\r\n  [filter]: (state, action) => action.payload,\r\n});\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { contactsReducer } from \"./contacts/contacts-reducer\";\r\nimport { filterReducer } from \"./filter/filter-reducer\";\r\n// import { createStore } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import { combineReducers } from \"redux\";\r\n\r\n// export const store = createStore(rootReducer, composeWithDevTools());\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n//   filter: filterReducer,\r\n// });\r\nconst persistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  },\r\n});\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"modern-normalize/modern-normalize.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={\"Loading...\"} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3z4_a\",\"label\":\"Form_label__1ZUqu\",\"btn\":\"Form_btn__3B_Ds\",\"input\":\"Form_input__1gjiY\"};"],"sourceRoot":""}